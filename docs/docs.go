// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/signin/basic": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Sign in by email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Sign in",
                "parameters": [
                    {
                        "type": "string",
                        "description": "X-API-KEY is required",
                        "name": "X-API-KEY",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "sign in body",
                        "name": "signIn",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.SignInBasic"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UserAuth"
                        }
                    }
                }
            }
        },
        "/profile/mine": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get private profile",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Get profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "X-API-KEY is required",
                        "name": "X-API-KEY",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.InfoPrivateUser"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.InfoPrivateUser": {
            "type": "object",
            "required": [
                "_id",
                "email",
                "name",
                "roles"
            ],
            "properties": {
                "_id": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "profilePicUrl": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.InfoRole"
                    }
                }
            }
        },
        "dto.InfoRole": {
            "type": "object",
            "required": [
                "_id",
                "code"
            ],
            "properties": {
                "_id": {
                    "type": "string"
                },
                "code": {
                    "$ref": "#/definitions/model.RoleCode"
                }
            }
        },
        "dto.SignInBasic": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 6
                }
            }
        },
        "dto.UserAuth": {
            "type": "object",
            "required": [
                "tokens",
                "user"
            ],
            "properties": {
                "tokens": {
                    "$ref": "#/definitions/dto.UserTokens"
                },
                "user": {
                    "$ref": "#/definitions/dto.InfoPrivateUser"
                }
            }
        },
        "dto.UserTokens": {
            "type": "object",
            "required": [
                "accessToken",
                "refreshToken"
            ],
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            }
        },
        "model.RoleCode": {
            "type": "string",
            "enum": [
                "LEARNER",
                "ADMIN",
                "AUTHOR",
                "EDITOR"
            ],
            "x-enum-varnames": [
                "RoleCodeLearner",
                "RoleCodeAdmin",
                "RoleCodeAuthor",
                "RoleCodeEditor"
            ]
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Provide a valid JWT token. Format: Bearer \u003ctoken\u003e",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "externalDocs": {
        "description": "OpenAPI",
        "url": "https://swagger.io/resources/open-api/"
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Swagger Example API",
	Description:      "This is a sample server celler server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
